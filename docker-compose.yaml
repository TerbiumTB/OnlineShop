services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.4
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka

    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 3s
      timeout: 10s
      retries: 3

  orders:
    build: orders
    hostname: orders
    ports:
      - "8080:8080"
    env_file:
      - "orders/.env"
      - "kafka.env"
    depends_on:
      kafka:
        condition: service_healthy
      orders-db:
        condition: service_healthy
        restart: true

  orders-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders-db
      PGDATA: /var/lib/postgresql/data/orders-pgdata
    ports:
      - "5432:5432"
    volumes:
      - orders-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 3s
      retries: 3

  payments:
    build: payments
    hostname: payments
    ports:
      - "8081:8080"
    env_file:
      - "payments/.env"
      - "kafka.env"
    depends_on:
      kafka:
        condition: service_healthy
      payments-db:
        condition: service_healthy
        restart: true
  payments-db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payments-db
      PGDATA: /var/lib/postgresql/data/payments-pgdata

    ports:
      - "5430:5432"
    volumes:
      - payments-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 3s
      retries: 3

  api-gateway:
    build: ./api-gateway
    hostname: api-gateway
    ports:
      - "8000:8000"
    env_file:
      - "api-gateway/.env"
    depends_on:
      - orders
      - payments

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  orders-pgdata:
  payments-pgdata: